// generated by mBlock5 for mBot Ranger
// codes make you happy

#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeAuriga.h>

MeLightSensor lightsensor_12(12);
MeLineFollower linefollower_10(10);
MeEncoderOnBoard Encoder_1(SLOT1);
MeEncoderOnBoard Encoder_2(SLOT2);

float LINE_STATE = 0;
float LEFT_MOTOR_PORT = 0;
float RIGHT_MOTOR_PORT = 0;
float IS_REVERSED = 0;
float RIGHT_MOTOR_BACKWARD_SPEED = 0;
float LEFT_MOTOR_BACKWARD_SPEED = 0;
float RIGHT_MOTOR_FORWARD_SPEED = 0;
float LEFT_MOTOR_FORWARD_SPEED = 0;
float BOTH_MOTORS_FORWARD_SPEED = 0;
float BOTH_MOTORS_BACKWARD_SPEED = 0;
float FORWARD_DIRECTION = 0;
float BACKWARD_DIRECTION = 0;
float BLACK_WHITE_LINE_STATE = 0;
float WHITE_WHITE_LINE_STATE = 0;
float BLACK_BLACK_LINE_STATE = 0;
float WHITE_BLACK_LINE_STATE = 0;
float FALSE_VALUE = 0;
float TRUE_VALUE = 0;
float MOTOR_PORT_1 = 0;
float BIG_TURN_SPEED = 0;
float SMALL_TURN_SPEED = 0;
float PREVIOUS_LINE_STATE = 0;
float LAST_STEER_LINE_STATE = 0;
float RETURN_BIG_SPEED = 0;
float RETURN_SMALL_SPEED = 0;
float SMALL_STEER_SPEED = 0;
float BIG_STEER_SPEED = 0;
float LOST_BIG_SPEED = 0;
float LOST_SMALL_SPEED = 0;
float LAST_EQUAL_STATE = 0;
float HUNDRED_PERCENT = 0;

void DECLARE_CONSTANTS(){
    TRUE_VALUE = 1;
    FALSE_VALUE = 0;
    MOTOR_PORT_1 = 1;
    RIGHT_MOTOR_PORT = 1;
    LEFT_MOTOR_PORT = 2;
    IS_REVERSED = FALSE_VALUE;
    BLACK_BLACK_LINE_STATE = 0;
    BLACK_WHITE_LINE_STATE = 1;
    WHITE_BLACK_LINE_STATE = 2;
    WHITE_WHITE_LINE_STATE = 3;
    FORWARD_DIRECTION = TRUE_VALUE;
    BACKWARD_DIRECTION = FALSE_VALUE;

}
void START_SIMPLE_LINE_TRACER(){
    DECLARE_CONSTANTS();
    BOTH_MOTORS_FORWARD_SPEED = 35;
    BOTH_MOTORS_BACKWARD_SPEED = 20;
    BIG_TURN_SPEED = 60;
    SMALL_TURN_SPEED = 30;
    RIGHT_MOTOR_FORWARD_SPEED = BIG_TURN_SPEED;
    LEFT_MOTOR_BACKWARD_SPEED = SMALL_TURN_SPEED;
    RIGHT_MOTOR_BACKWARD_SPEED = SMALL_TURN_SPEED;
    LEFT_MOTOR_FORWARD_SPEED = BIG_TURN_SPEED;
    while(1) {
        LINE_STATE = linefollower_10.readSensors();
        if(LINE_STATE == BLACK_BLACK_LINE_STATE){
          SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, BOTH_MOTORS_FORWARD_SPEED, FORWARD_DIRECTION);
          SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, BOTH_MOTORS_FORWARD_SPEED, FORWARD_DIRECTION);

        }else{
          if(LINE_STATE == BLACK_WHITE_LINE_STATE){
            SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RIGHT_MOTOR_FORWARD_SPEED, FORWARD_DIRECTION);
            SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LEFT_MOTOR_BACKWARD_SPEED, BACKWARD_DIRECTION);

          }else{
            if(LINE_STATE == WHITE_BLACK_LINE_STATE){
              SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RIGHT_MOTOR_BACKWARD_SPEED, BACKWARD_DIRECTION);
              SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LEFT_MOTOR_FORWARD_SPEED, FORWARD_DIRECTION);

            }else{
              SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, BOTH_MOTORS_BACKWARD_SPEED, BACKWARD_DIRECTION);
              SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, BOTH_MOTORS_BACKWARD_SPEED, BACKWARD_DIRECTION);

            }

          }

        }

        _loop();
    }

}
void MOVE_FORWARD(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, BOTH_MOTORS_FORWARD_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, BOTH_MOTORS_FORWARD_SPEED, FORWARD_DIRECTION);

}
void MOVE_BACKWARD(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RIGHT_MOTOR_FORWARD_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LEFT_MOTOR_BACKWARD_SPEED, BACKWARD_DIRECTION);

}
void START_EXPERT_LINE_TRACER(){
    DECLARE_CONSTANTS();
    BOTH_MOTORS_FORWARD_SPEED = 20;
    BOTH_MOTORS_BACKWARD_SPEED = 20;
    BIG_TURN_SPEED = 30;
    SMALL_TURN_SPEED = 20;
    RIGHT_MOTOR_FORWARD_SPEED = BIG_TURN_SPEED;
    LEFT_MOTOR_BACKWARD_SPEED = SMALL_TURN_SPEED;
    RIGHT_MOTOR_BACKWARD_SPEED = SMALL_TURN_SPEED;
    LEFT_MOTOR_FORWARD_SPEED = BIG_TURN_SPEED;
    CONFIGURE_EXPERT_LINE_TRACER();
    EXPERT_LINE_TRACER_LOOP_CODE();

}
void TURN_RIGHT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RIGHT_MOTOR_BACKWARD_SPEED, BACKWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LEFT_MOTOR_FORWARD_SPEED, FORWARD_DIRECTION);

}
void TURN_LEFT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RIGHT_MOTOR_FORWARD_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LEFT_MOTOR_BACKWARD_SPEED, BACKWARD_DIRECTION);

}
void isr_process_encoder1(void)
{
  if(digitalRead(Encoder_1.getPortB()) == 0){
    Encoder_1.pulsePosMinus();
  }else{
    Encoder_1.pulsePosPlus();
  }
}
void isr_process_encoder2(void)
{
  if(digitalRead(Encoder_2.getPortB()) == 0){
    Encoder_2.pulsePosMinus();
  }else{
    Encoder_2.pulsePosPlus();
  }
}
void move(int direction, int speed)
{
  int leftSpeed = 0;
  int rightSpeed = 0;
  if(direction == 1){
    leftSpeed = -speed;
    rightSpeed = speed;
  }else if(direction == 2){
    leftSpeed = speed;
    rightSpeed = -speed;
  }else if(direction == 3){
    leftSpeed = -speed;
    rightSpeed = -speed;
  }else if(direction == 4){
    leftSpeed = speed;
    rightSpeed = speed;
  }
  Encoder_1.setTarPWM(leftSpeed);
  Encoder_2.setTarPWM(rightSpeed);
}
void SET_MOTOR_N_N_N(double PORT, double POWER, double DIRECTION){
    if(IS_REVERSED == TRUE_VALUE){
      if(DIRECTION == FORWARD_DIRECTION){
        DIRECTION = BACKWARD_DIRECTION;

      }else{
        DIRECTION = FORWARD_DIRECTION;

      }

    }
    if(PORT == MOTOR_PORT_1){
      if(DIRECTION == FORWARD_DIRECTION){

        Encoder_1.setTarPWM(-1 * POWER/100.0*255);

      }else{

        Encoder_1.setTarPWM(1 * POWER/100.0*255);

      }

    }else{
      if(DIRECTION == FORWARD_DIRECTION){

        Encoder_2.setTarPWM(1 * POWER/100.0*255);

      }else{

        Encoder_2.setTarPWM(-1 * POWER/100.0*255);

      }

    }

}
void NORMAL_STEER_RIGHT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, SMALL_STEER_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, BIG_STEER_SPEED, FORWARD_DIRECTION);

}
void NORMAL_STEER_LEFT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, BIG_STEER_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, SMALL_STEER_SPEED, FORWARD_DIRECTION);

}
void CONFIGURE_EXPERT_LINE_TRACER(){
    BIG_STEER_SPEED = 30;
    SMALL_STEER_SPEED = 10;
    RETURN_BIG_SPEED = 35;
    RETURN_SMALL_SPEED = 10;
    LOST_BIG_SPEED = 35;
    LOST_SMALL_SPEED = 10;
    BOTH_MOTORS_FORWARD_SPEED = 50;

}
void RETURN_STEER_RIGHT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RETURN_BIG_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, RETURN_SMALL_SPEED, FORWARD_DIRECTION);

}
void RETURN_STEER_LEFT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, RETURN_SMALL_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, RETURN_BIG_SPEED, FORWARD_DIRECTION);

}
void LOST_STEER_RIGHT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, LOST_SMALL_SPEED, BACKWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LOST_BIG_SPEED, FORWARD_DIRECTION);

}
void LOST_STEER_LEFT(){
    SET_MOTOR_N_N_N(RIGHT_MOTOR_PORT, LOST_BIG_SPEED, FORWARD_DIRECTION);
    SET_MOTOR_N_N_N(LEFT_MOTOR_PORT, LOST_SMALL_SPEED, BACKWARD_DIRECTION);

}
void EXPERT_LINE_TRACER_LOOP_CODE(){
    PREVIOUS_LINE_STATE = BLACK_BLACK_LINE_STATE;
    LAST_STEER_LINE_STATE = BLACK_BLACK_LINE_STATE;
    LAST_EQUAL_STATE = BLACK_BLACK_LINE_STATE;
    while(1) {
        LINE_STATE = linefollower_10.readSensors();
        if(LINE_STATE == BLACK_BLACK_LINE_STATE){
          if(LAST_STEER_LINE_STATE == BLACK_WHITE_LINE_STATE){
            RETURN_STEER_LEFT();

          }else{
            if(LAST_STEER_LINE_STATE == WHITE_BLACK_LINE_STATE){
              RETURN_STEER_RIGHT();

            }else{
              MOVE_FORWARD();

            }

          }
          LAST_EQUAL_STATE = LINE_STATE;

        }else{
          if(LINE_STATE == BLACK_WHITE_LINE_STATE){
            if(LAST_EQUAL_STATE == WHITE_WHITE_LINE_STATE){
              RETURN_STEER_LEFT();

            }else{
              NORMAL_STEER_LEFT();

            }
            LAST_STEER_LINE_STATE = BLACK_WHITE_LINE_STATE;

          }else{
            if(LINE_STATE == WHITE_BLACK_LINE_STATE){
              if(LAST_EQUAL_STATE == WHITE_WHITE_LINE_STATE){
                RETURN_STEER_RIGHT();

              }else{
                NORMAL_STEER_RIGHT();

              }
              LAST_STEER_LINE_STATE = WHITE_BLACK_LINE_STATE;

            }else{
              if(LAST_STEER_LINE_STATE == BLACK_WHITE_LINE_STATE){
                LOST_STEER_LEFT();

              }else{
                LOST_STEER_RIGHT();

              }
              LAST_EQUAL_STATE = LINE_STATE;

            }

          }

        }
        PREVIOUS_LINE_STATE = LINE_STATE;

        _loop();
    }

}

void _delay(float seconds) {
  if(seconds < 0.0){
    seconds = 0.0;
  }
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void setup() {
  randomSeed((unsigned long)(lightsensor_12.read() * 123456));
  TCCR1A = _BV(WGM10);
  TCCR1B = _BV(CS11) | _BV(WGM12);
  TCCR2A = _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS21);
  attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);
  attachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);
  START_SIMPLE_LINE_TRACER();

}

void _loop() {
  Encoder_1.loop();
  Encoder_2.loop();
}

void loop() {
  _loop();
}